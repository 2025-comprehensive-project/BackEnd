// Description: Ïñ¥ÎìúÎØº Í≥ÑÏ†ï ÏÉùÏÑ± ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏ ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏
require('dotenv').config();
const db = require('../config/dbConnect');
const bcrypt = require('bcrypt');
const readline = require('readline');

console.log(process.env.DB_USER);

// ÌÑ∞ÎØ∏ÎÑê ÏûÖÎ†•ÏùÑ ÏúÑÌïú Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏÑ§Ï†ï
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Ïù¥Î©îÏùº ÏûÖÎ†• ÌîÑÎ°¨ÌîÑÌä∏
rl.question('Enter admin email: ', (emailInput) => {
    if (!emailInput) {
        console.log('‚ùå Email cannot be empty.');
        rl.close();
        process.exit(1);
    }

    const email = emailInput.toLowerCase(); // Ïù¥Î©îÏùº ÏÜåÎ¨∏Ïûê Î≥ÄÌôò

    // DB Ï°∞Ìöå Î∞è Î∂ÑÍ∏∞ Ï≤òÎ¶¨
    db.query('SELECT * FROM admin WHERE email = ?', [email])
        .then(async ([existingAdmin]) => {
            if (existingAdmin.length > 0) {
                // Ïù¥ÎØ∏ Ï°¥Ïû¨ ‚Üí ÎπÑÎ∞ÄÎ≤àÌò∏ ÏàòÏ†ï Ïó¨Î∂Ä ÌôïÏù∏
                rl.question('‚ö†Ô∏è Admin exists. Do you want to update the password? (y/N): ', async (confirm) => {
                    if (confirm.toLowerCase() === 'y') {
                        rl.question('Enter new password: ', async (newPassword) => {
                            if (!newPassword) {
                                console.log('‚ùå Password cannot be empty.');
                                rl.close();
                                process.exit(1);
                            }
                            const hashed = await bcrypt.hash(newPassword, 10);
                            await db.query('UPDATE admin SET password = ? WHERE email = ?', [hashed, email]);
                            console.log(`üîÑ Password for ${email} updated successfully.`);
                            rl.close();
                            process.exit();
                        });
                    } else {
                        console.log('‚ùå Aborted.');
                        rl.close();
                        process.exit();
                    }
                });
            } else {
                // Ïã†Í∑ú ÏÉùÏÑ±
                rl.question('Enter admin password: ', async (password) => {
                    if (!password) {
                        console.log('‚ùå Password cannot be empty.');
                        rl.close();
                        process.exit(1);
                    }
                    const hashedPassword = await bcrypt.hash(password, 10);
                    await db.query('INSERT INTO admin (email, password) VALUES (?, ?)', [email, hashedPassword]);
                    console.log(`‚úÖ Admin account for ${email} created successfully!`);
                    rl.close();
                    process.exit();
                });
            }
        })
        .catch((error) => {
            console.error('‚ùå Error querying admin table:', error);
            rl.close();
            process.exit(1);
        });
    })